<apex:page sidebar="false" >
    <title>Add image and train model with tensorflowJS</title> 
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@0.15.1"> </script>
    <script src="https://unpkg.com/@tensorflow-models/mobilenet"></script>
    <body>
        <div class="progress progress-bar progress-bar-striped progress-bar-animated mb-2">
            Loading Model
            </div>
            
            <select id="model-selector" class="custom-select" >
                <option>mobilenet</option>                    
            </select>
            
            <h2>Prediction</h2>
            <ol id="prediction-list"></ol>
            
            <h2 class="ml-3">Images</h2>
            
            <button id="predict-button" class="btn btn-dark float-right">
                Predict
            </button>
            </body>
            <div>
                <input id="readCSV" type="file" label="" name="Mapping" multiple="false" accept=".csv"  />
                    </div>
                <script>
                    
                    $("#model-selector").ready(function(){
                    loadModel($("#model-selector").val());
                })
                
                let model;
    var classified = [];
    var notclassified = [];
    let arrayAllImages = [];
    async function loadModel(name){
        model = tf.sequential();
    }
    $("#readCSV").on('change', function (evt){
        var files = evt.target.files;
        for (var i = 0; i < files.length; i++) {
            var file=files[i];    
            reader = new FileReader();
            reader.onload = function(){
                console.log("file.name",file.name);
                console.log("Data",this.result);
                var text = reader.result; /*Get the data stored in file*/
                textdata = text;
                console.log('textdata',textdata);
                var infolst = [];
                var rows = textdata.split('\n'); /*Spilt based on new line to get each row*/
                for(var i=0; i< rows.length; i = i+1){
                    var cells = rows[i].split(',');
                    //Get All rows except header
                    if(cells.length!=1){
                        var labelSRC = cells[1].split('\r');
                        //get All classified coloumn
                        if(cells[1].startsWith("https://")){
                            var cellinfo = {
                                'Index': cells[0],
                                'Classified': cells[1]
                            };
                            classified.push(cells[1]);
                            console.log('classified:::::'+classified);
                        }
                        //get All Non-classified coloumn
                        if(cells[2].startsWith("https://")){
                            var cellinfo = {
                                'Index': cells[0],
                                'Not Classified': cells[2]
                            };
                            notclassified.push(cells[2]); 
                            console.log('notclassified:::::'+notclassified);;     
                        }                                   
                    }
                }
            };
            reader.readAsText(file);
        }            
    });
    $("#predict-button").click(async function(){
        let arrayClassifiedImg = [];
        let arrayNonClassifiedImg = [];
        
        var imgClassified;
        var imgNonClassified;
        for (var i = 0; i < classified.length; i++) {
            imgClassified = new Image(224, 224);
            imgClassified.src = classified[i];
            imgClassified.crossOrigin = 'anonymous';
            console.log('imgClassified::::', imgClassified);
            arrayClassifiedImg.push(imgClassified);
            arrayAllImages.push(imgClassified);
        }
        
        for (var i = 0; i < notclassified.length; i++) {
            imgNonClassified = new Image(224, 224);
            imgNonClassified.src = notclassified[i];
            imgNonClassified.crossOrigin = 'anonymous';
            console.log('imgNonClassified', imgNonClassified);
            arrayNonClassifiedImg.push(imgNonClassified);
            arrayAllImages.push(imgNonClassified);
        }
        console.log('arrayClassifiedImg'+arrayClassifiedImg+'arrayAllImages'+arrayAllImages);
        console.log('arrayNonClassifiedImg'+arrayNonClassifiedImg+'arrayAllImages'+arrayAllImages);
        console.log('arrayClassifiedImg'+arrayClassifiedImg.length+'arrayNonClassifiedImg'+arrayNonClassifiedImg.length+'arrayAllImages'+arrayAllImages.length);
        let tensorarr = [];
        let tensor = '';
        //get Imagea to convert in tensor
        for (var i = 0; i < arrayAllImages.length; i++) {
            console.log('allTypeimages' + arrayAllImages[i]);
            tensor = preprocessImage(arrayAllImages[i], 'mobilenet');
            tensorarr.push(tensor);
        }
        console.log('tensorarr',tensorarr);
        let resize_image = [];
        let resize;
        for(var i=0; i<tensorarr.length; i++)
        {
            resize = tf.reshape(tensorarr[i], [1, 224, 224, 3],'resize');
            console.log('resize:::',resize);
            resize_image.push(resize);
        }
        //Labels
        //const label = ['CAT','CAT','CAT','CAT','CAR','CAR','CAR','CAR'];    
        //const label = ['Store Shelf','Store Shelf','Store Shelf','Store Shelf','Store Shelf','Store Shelf','Store Shelf','Store Shelf','Store Shelf','Rejected','Rejected','Rejected','Rejected','Rejected','Rejected','Rejected','Rejected','Rejected'];
        //const label = ['Store Shelf','Store Shelf','Store Shelf','Store Shelf','Store Shelf','Store Shelf','Store Shelf','Store Shelf','Store Shelf','Store Shelf','Store Shelf','Store Shelf','Store Shelf','Store Shelf','Store Shelf','Store Shelf','Store Shelf','Store Shelf','Store Shelf','Store Shelf','Store Shelf','Rejected','Rejected','Rejected','Rejected','Rejected','Rejected','Rejected','Rejected','Rejected','Rejected','Rejected','Rejected','Rejected','Rejected','Rejected','Rejected','Rejected','Rejected','Rejected','Rejected','Rejected'];
        let label = [];
        for(var k = 0; k< 21; k++){
            label.push('Store Shelf');
        }
        for(var l = 0; l< 21; l++){
            label.push('Rejected');
        }
        const setLabel = Array.from(new Set(label));
        let ysarr =[];
        const ys = tf.oneHot(tf.tensor1d(label.map((a) => setLabel.findIndex(e => e === a)), 'int32'), 10)
        console.log('ys:::'+ys);
        const y = tf.reshape(ys, [-1]);
        y.print();
        let d;
        for(var m=0; m<label.length ;m++){
            d = y.slice([m*10], [10]);
            d.print();
            ysarr.push(d);
        }
        
        console.log('ysarr',ysarr);
        
        //Adding Layers to model
        model.add(tf.layers.conv2d({
            inputShape: [224, 224 , 3],
            kernelSize: 5,
            filters: 8,
            strides: 1,
            activation: 'relu',
            kernelInitializer: 'VarianceScaling'
        }));
        model.add(tf.layers.maxPooling2d({poolSize: 2, strides: 2}));
        model.add(tf.layers.maxPooling2d({poolSize: 2, strides: 2}));
        model.add(tf.layers.flatten({}));
        model.add(tf.layers.dense({units: 64, activation: 'relu'}));
        model.add(tf.layers.dense({units: 10, activation: 'softmax'}));
        
        //Compiling Model
        model.compile({
            loss: 'meanSquaredError',
            optimizer : 'sgd'
        })
        console.log('model:::'+model);
        
        // Train the model using the data.
        let tesnor_dim =[];
        let tensr;
        for(var j=0; j<resize_image.length; j++){
            console.log('resize_image',resize_image);
            tensr = tf.expandDims(ysarr[j], 0);
            tesnor_dim.push(tensr);
            console.log('tesnor_dim',tesnor_dim);
            console.log('before resize_image[j]',resize_image[j]);
            console.log('before tesnor_dim[j]',tesnor_dim[j]);
            await model.fit(resize_image[j], tesnor_dim[j], {epochs: 100}).then((loss) => {
                console.log('resize_image.get[j]',resize_image[j]);
                console.log('tesnor_dim[j]',tesnor_dim[j]);
                console.log('loss',loss);
                const t = model.predict(resize_image[j]);
                console.log('Prediction:::'+t);
                pred = t.argMax(1).dataSync(); // get the class of highest probability
                const labelsPred = Array.from(pred).map(e => setLabel[e]);
                console.log('labelsPred:::'+labelsPred);
                
            }).catch((e) => {
                console.log(e.message);
            })
            }    //Save Model
                const saveResults = model.save('downloads://my-model-1');
                console.log(saveResults);   
            });
                //Processing Image to tensor
                function preprocessImage(image,modelName)
                {
                let tensor = tf.browser.fromPixels(image)
                .resizeNearestNeighbor([224,224])
                .toFloat();
                console.log('tensor pro:::', tensor);
                if(modelName==undefined)
                {
                return tensor.expandDims();
            }
                if(modelName=="mobilenet")
                {
                let offset=tf.scalar(127.5);
                console.log('offset:::',offset);
                return tensor.sub(offset)
                .div(offset)
                .expandDims();
            }
                else
                {
                throw new Error("UnKnown Model error");
            }
            }
                </script>
</apex:page>